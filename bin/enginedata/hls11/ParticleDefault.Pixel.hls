#line 1 "enginedata\hls11\Default.Pixel.hlp"




cbuffer SHADER_EXTERN
{
	float4 DrawPhase;
	float4 UseShadowMap;
	float4 ClipPlane;


	float4 MaterialAmbient;
	float4 MaterialSpecular;
	float4 MaterialDiffuse;

	float4 AmbientColor;
	float4 AmbientColorRate;

	float4 Glossiness;

	float4 CameraPos;

	float4 LightColor[16];
	float4 LightFactor[17];
	float4 LightFactorSpotDirection[16];
	float4 LightFactorSpotFactor[16];

	float4 Opacity;

	float4 FogFactor;
	float4 FogColor;
	float4 AlbedoColor;

	float4 SunLight;	
	
	float4x4 ObjectWorld;
	float4 NormalMapDirection;

	float4 ShadingModel;
	float4 DiffuseColor;

	float4 AlphaTest;  

	float4 BackgroundType;
	float4 InternalMipMapInfo[11];
	float4 EnvMapProjection;

	float4 TextureUVTransform;

};


// 출력정점 형식
struct VS_OUTPUT
{
	float4 Position : POSITION0;
	float4 UV : TEXCOORD0;  // uv.z 는 depth 로 사용 한다 !!
	float4 InPosition : TEXCOORD1;
	float4 ViewPosition : TEXCOORD2;
	float4 ShadowPosition : TEXCOORD3;
	float4 CameraPosition : POSITION1;
	float4 Normal : NORMAL0; 
    float4 Tangent : NORMAL1;
    float4 Binormal : NORMAL2;
	float4 Diffuse : NORMAL3;
};


float2 GetTextureColor(float4 TextureUV ,  float2 uv)
{

		float2 uv0 = TextureUVTransform.xy;
		float2 uv1 = TextureUVTransform.zw;
		float2 uv_vec = float2(uv1.x - uv0.x , uv1.y - uv0.y);
		float2 result;

		bool Flipped = false;

		if(uv1.y > 1.0)
		{
			Flipped = true;
		}
	
	
	if( !Flipped  )
	{
		float2 uv0 = TextureUVTransform.xy;
		float2 uv1 = TextureUVTransform.zw;
		
		float2 uv_vec = float2(uv1.x - uv0.x , uv1.y - uv0.y);

		result =  float2(uv0.x  + (uv_vec.x * uv.x) , uv0.y + (uv_vec.y * uv.y) ); 
	}
	else
	{
		float2 uv0 = TextureUVTransform.zy;
		float2 uv1 = TextureUVTransform.xw;

		uv1.y = uv1.y - 1;

		
		
		float2 uv_vec = float2(uv1.x - uv0.x , uv1.y - uv0.y);
		
		result =  float2(uv0.x  + (uv_vec.x * uv.y) , uv0.y + (uv_vec.y * uv.x) ); 


		
	}


	return result;
	
}



/*
아래 slot number가 dx11에서 bug 있으므로  아래 comment된 코드와 병용해야 함

sampler TextureDiffuse : register(s0);
*/


Texture2D TextureDiffuse : register(t0);
SamplerState TextureDiffuseSampler : register(s0);


float4 PS(VS_OUTPUT Out) : SV_Target
{
	// Sample the texture

	Out.UV.xy = GetTextureColor(TextureUVTransform ,  Out.UV.xy );

	float4 color = TextureDiffuse.SampleLevel(TextureDiffuseSampler, Out.UV.xy, 0); // * color

	//color *= Out.ShadowPosition.x;

	//if(DiffuseColor.x > -100)
	//	color.a *= clamp( min(factor.x, factor.y), 0.0, 1.0);
	
	color *= Out.Diffuse;

	return color;
}





