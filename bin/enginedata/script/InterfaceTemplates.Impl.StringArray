%dllRetType% Engine_%group%_Get%prop%(UID obj, %propindexcomma% int index)
{
	Component::ComponentBase *base = Component::Link< Component::ComponentBase >::LookupPointer(obj);

#ifdef ES_CHAR16
	static WideString returnString;
#else
	static String returnString;
#endif

	if (base && base->KindOf(Dictionary::%containerClassname%))
	{
		%namespace%::%containerClassname% *obj = static_cast<%namespace%::%containerClassname% *>(base);

		int arraySize = sizeof(obj->%groupvar%%propindexaccess%.%prop%) / sizeof(obj->%groupvar%%propindexaccess%.%prop%[0]);
		if (index <= arraySize && index >= 1)
		{
			String result;
			if ((&obj->%groupvar%%propindexaccess%) != NULL)
			{
				obj->%groupvar%%propindexaccess%.%prop%[index-1].ToString(result);
				returnString = ES_STRING( result );
			}
			else
			{
				Debugger::GetLogger().Log("Cannot Access obj->%groupvar%%propindexaccess% (out of arraybound) in Engine_%group%_Get%prop%" );
				returnString = ES_STRING( %default% );
			}
		}
		else
		{
			Debugger::GetLogger().Log("Cannot Access obj->%groupvar%%propindexaccess% in Engine_%group%_Get%prop%" );
			returnString = ES_STRING( %default% );
		}
	}
	else
	{
		Debugger::GetLogger().Log("Script Lookup Errror %containerClassname% (%s) in Engine_%group%_Get%prop%", (const char *)Utility::StringConversion::ToString( obj )); 
		returnString = ES_STRING( %default% );
	}
	
	return returnString;
}





void Engine_%group%_Set%prop%(UID obj , %propindexcomma% %dllArgType% value, int index)
{
	Component::ComponentBase *base = Component::Link< Component::ComponentBase >::LookupPointer(obj);
	if (base && base->KindOf(Dictionary::%containerClassname%))
	{
		%namespace%::%containerClassname% *obj = static_cast<%namespace%::%containerClassname% *>(base);
		if ((&obj->%groupvar%%propindexaccess%) != NULL)
		{
			int arraySize = sizeof(obj->%groupvar%%propindexaccess%.%prop%) / sizeof(obj->%groupvar%%propindexaccess%.%prop%[0]);
			if (index <= arraySize && index >= 1)
			{
				obj->%groupvar%%propindexaccess%.%prop%[index-1].FromString( ASTRING ( value ) );
				obj->%groupvar%%propindexaccess%.%prop%[index-1].ApplyChange();
			}
		}
		else
		{
			Debugger::GetLogger().Log("Cannot Access obj->%groupvar%%propindexaccess% in Engine_%group%_Set%prop%" );
		}
	}
	else
	{
		Debugger::GetLogger().Log("Script Lookup Errror %containerClassname% (%s) in Engine_%group%_Set%prop%", (const char *)Utility::StringConversion::ToString( obj )); 
	}

}







