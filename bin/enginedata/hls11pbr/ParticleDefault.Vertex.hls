#line 1 "enginedata\hls11\Default.Vertex.hls"


cbuffer SHADER_EXTERN
{
	float4x4 ViewProj;
	float4x4 World;
	float4x4 WorldInverse;
	float4x4 ObjectWorld;
	float4x4 View;
	float4x4 Proj;
	float4 CameraPos;
	float4 SunLight;

	float4 DrawPhase;
	float4x4 ShadowMapMatrix;
	float4 UseShadowMap;
	float4 ShadowMapDepthMax; 
	float4 ShadowMapDepthMin; 

	float4 UseMatrixPalette;
	float4x4 MatrixPalette[200];

	float4 AmbientColor;
	
};

// 입력정점 형식
struct VS_INPUT
{
    float3 Position : POSITION0;
    float4 UV : TEXCOORD0;
    float4 Normal : NORMAL; 
    float4 Tangent : NORMAL1;
    float4 Diffuse : NORMAL2;
    float4  Weight    : BLENDWEIGHT;
    float4  PaletteIndex    : BLENDINDICES;
};





// 출력정점 형식
struct VS_OUTPUT
{
	float4 Position : POSITION0;
	float4 UV : TEXCOORD0;  // uv.z 는 depth 로 사용 한다 !!
	float4 InPosition : TEXCOORD1;
	float4 ViewPosition : TEXCOORD2;
	float4 ShadowPosition : TEXCOORD3;
	float4 CameraPosition : POSITION1;
	float4 Normal : NORMAL0; 
    float4 Tangent : NORMAL1;
    float4 Binormal : NORMAL2;
	float4 Diffuse : NORMAL3;
};





VS_OUTPUT VS(VS_INPUT In)
{
	VS_OUTPUT   Out;
    
    float4 posWorld;
    posWorld.xyz = In.Position;
    posWorld.w = 1.0;    

	float4x4 world;
	world = World;

	posWorld = mul(posWorld, world );
	float3 posWorldSave = posWorld.xyz / posWorld.w;
	Out.InPosition = float4(posWorldSave, 1.0);


	Out.Diffuse = In.Diffuse;
	Out.UV = In.UV;



	posWorld = mul(posWorld, View); 
		
	Out.UV.z = posWorld.z / posWorld.w;		
	Out.ViewPosition = mul(posWorld, Proj); 
	Out.Position = Out.ViewPosition ;


	return Out;

}











