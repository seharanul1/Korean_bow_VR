#line 1 "enginedata\hls11\DefaultSkin.Vertex.hls"


cbuffer SHADER_EXTERN
{
	float4x4 WorldViewProj;
	float4x4 ViewProj;
	float4x4 World;
	float4x4 WorldInverse;
	float4x4 ObjectWorld;
	float4x4 View;
	float4x4 Proj;
	float4 CameraPos;
	float4 SunLight;	


	int DrawPhase;
	float4x4 ShadowMapMatrix;
	float4 UseShadowMap;
	float4 ShadowMapDepthMax; 
	float4 ShadowMapDepthMin; 
	float4 UseMatrixPalette;
	float4x4 MatrixPalette[55];
};

#include "Common.Vertex.inc"




// 입력정점 형식
struct VS_INPUT
{
    float3 Position : POSITION;
    float3 Normal : NORMAL0;
    float2 UV : TEXCOORD0;
    float3 Tangent : NORMAL1;
    float4  Weight    : BLENDWEIGHT;
    float4  PaletteIndex    : BLENDINDICES;
};






// 출력정점 형식
struct VS_OUTPUT
{
	float4 Position : POSITION;
	float3 UV : TEXCOORD0;  // uv.z 는 depth 로 사용 한다 !!
	float4 InPosition : TEXCOORD1;
	float4 ViewPosition : TEXCOORD2;
	float4 ShadowPosition : TEXCOORD3;
	float4 CameraPosition : TEXCOORD4;
	float3 Normal : NORMAL0; 
	float3 Light: NORMAL1; 
	float3 CameraDir: NORMAL2; 
    float3 Tangent : NORMAL3;
    float3 Binormal : NORMAL4;
	float4 Diffuse : NORMAL5;
};






float4x4 CalcPalette(float4 paletteIndex, float4 weight)
{
	float4x4 worldSkin = MatrixPalette[paletteIndex.x] * weight.x; 
	if (weight.y > 0.001)
		worldSkin += MatrixPalette[paletteIndex.y] * weight.y ;
	if (weight.z > 0.001)
		worldSkin += MatrixPalette[paletteIndex.z] * weight.z ;
	if (weight.w > 0.001)
		worldSkin += MatrixPalette[paletteIndex.w] * weight.w ;

    return worldSkin ;
}




VS_OUTPUT VS(VS_INPUT In)
{
	const float DepthRange = 100.0;

    VS_OUTPUT   Out;
    
    float4 pos4;
    pos4.xyz = In.Position;
    pos4.w = 1.0;


	float4x4 worldSkin = CalcPalette( In.PaletteIndex, In.Weight);
   	float4 posWorld = mul(pos4, worldSkin); 
   	
	Out.InPosition = posWorld;
	
	if (DrawPhase == 4) //  PhaseShadowMap
	{
		
		Out.ShadowPosition = GetShadowPosition(posWorld) ;
		Out.ViewPosition = Out.ShadowPosition;
		Out.Position = Out.ViewPosition;
	}
	else
	{
		if (UseShadowMap.x > 0.9)   
		{
			Out.ShadowPosition = GetShadowPosition(Out.InPosition) ;
		}

		posWorld = mul(posWorld, View); 
		Out.UV.z = posWorld.z / posWorld.w;

		Out.ViewPosition = mul(posWorld, Proj); 
		Out.Position = Out.ViewPosition ;

		if (UseShadowMap.x < 0.1)   
		{
			//Out.ShadowPosition = Out.ViewPosition;
		}
		
	}	
	

	
	float3 normalTrans = mul( (float3)(In.Normal), (float3x3)(worldSkin)) ;
	normalTrans = normalize(normalTrans);


	Out.UV.xy = In.UV;
	Out.UV.z = Out.Position.z  / DepthRange;

	Out.Normal = normalTrans;


	float f = dot(-SunLight , normalTrans ) ;
	if (f < 0.0)
		f = 0.0;
	if (f > 0.1)
		f = 0.1;
	
	Out.Diffuse = float4(f,f,f,1.0);
	
    Out.CameraDir = (float3)posWorld - CameraPos ;
	// tangent space로 변환 끝
	
	if ((In.Tangent.x * In.Tangent.x + In.Tangent.y * In.Tangent.y + In.Tangent.z * In.Tangent.z) > 0.001)
	{

		// tangent space로 변환
		float3 tangent = normalize(mul( (float3)In.Tangent, (float3x3)(worldSkin) ));
	    
		// cross product 를 이용
		//float3 binormal = In.Normal;
		//binormal = mul( (float3)binormal, (float3x3)(World) );
	    
		float3 binormal = normalize( -cross(tangent, Out.Normal) );  // 또는 입력= In.Binormal;
		
	    Out.Binormal.xyz = binormal;
	    Out.Tangent = tangent;

		float3x3 lightSpace = float3x3(tangent, binormal, Out.Normal);   // column major 로 들어감
	    
		Out.Light = normalize(mul( lightSpace, SunLight));  // column vector 이므로 순서 반대로 변환해야함 
		Out.CameraDir = normalize(mul( lightSpace, Out.CameraDir ) );
		//Out.Normal = normalize(mul( lightSpace, Out.Normal));
    }
    else
	{
		Out.CameraDir = normalize( Out.CameraDir ) ;
		Out.Tangent = float3(0.0, 0.0, 0.0);
		Out.Binormal.xyz = float3(0.0, 0.0, 0.0);
		Out.Light = SunLight;
	}
	

    
	return Out;


}


